新建并启动容器：docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
另一种方式：
    docker run -it 镜像名字 /bin/bash ：以bash创建容器来进行交互
OPTIONS:
    --name "容器新名字"：为容器指定一个名称
    -d：后台运行容器，并返回容器ID，也即启动守护式容器
##注：dscoker ps -a 进行查看，会发现容器已经退出。重要的一点：Docker容器后台运行，就必须有一个前台进程。容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。
        例如web容器，以nginx为例，正常情况下，我们配置启动服务只需要启动相应的service即可（service nginx start），但是，这样做nagix前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了
        解决方案：将要运行的程序以前台进程的形式运行
    -t：为容器重新分配一个伪输入终端，通常与-t同时使用；（常用）
    -i：以交互模式运行容器，通常与-t同时使用(常用)
    -P： 随机端口映射 (常用)
    -p：指定端口映射，有以下四种格式
            ip:hostPort:containerPort
            ip::containerPort
            hostPort:containerPort
            containerPort
    例：docker run -it -p 8080:8080 容器名 ：-p 主机端口 : docker容器端口

查看正在运行的所有容器：docker ps [OPTIONS]
OPTIONS:
    -a：列出当前所有正在运行的容器 + 历史上运行过的
    -I：显示最近创建的容器
    -n：显示最近n个创建的容器
    -q：静默模式，只显示容器编号
    --no-trunc：不截断输出

退出容器：两种方式
    exit：容器停止退出
    ctrl + P + Q：容器不停止退出

启动容器：docker start 容器ID或容器名

重启容器：docker restart 容器ID或容器名

停止容器：docker stop 容器ID或容器名

强制停止容器：docker kill 容器ID或容器名

删除已经停止的容器：docker rm 容器ID  
一次性删除多个容器：
    docker rm -f $(docker ps -a -q)
    docker ps -a -q | xargs docker rm

查看容器日志：docker logs -f -t --tail 容器ID
OPTIONS：
    -t：加入时间戳
    -f：跟随最新的日志打印
    --tail 数字：显示最后多少条

查看容器内的进程：docker top 容器ID

查看容器内部细节：docker inspect 容器ID

进入正在运行的容器并以命令行交互：
    docker exec -it 容器ID bashShell
      例如：docker exec -it 容器ID ls -l ，即不用进入容器，在容器外面(宿主机)执行ls -l
    重新进入：docker attach 容器ID
##上述两种方式的区别：
    attach：直接进入容器启动命令的终端，不会启动新的进程
    exec：是在容器中打开新的终端，并且可以启动新的进程

从容器内拷贝文件到主机上：docker cp 容器ID:容器内路径 目的主机路径
